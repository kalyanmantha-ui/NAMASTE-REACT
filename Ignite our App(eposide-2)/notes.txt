Q1) What is `NPM`?
A) NPM is a package manager for JavaScript runtime environment and Node.js,npm allows developers to easily manage and 
share reusable code modules, called packages, within their Node.js projects. It acts as a central repository for these 
packages and provides tools for installing, updating, and managing them. 

Q) What is `Parcel/Webpack`? Why do we need it?
A) Parcel and Webpack are build tools called module bundlers that process and combine your code (JS, CSS, images) 
into optimized files the browser can understand. They handle modern features like JSX, TypeScript, and ES6 by transpiling 
and bundling everything into efficient output. We need them to develop smoothly and ship fast, production-ready apps 
that work across all browsers.

Q) What is `.parcel-cache`
A) The .parcel-cache folder is a hidden cache directory created by Parcel to speed up builds. 
It stores processed files (like transpiled JS, compiled CSS, etc.) so Parcel can reuse them in future builds 
instead of rebuilding everything from scratch. Deleting it is safe — but the next build might be slower until 
the cache is rebuilt.

Q) What is `npx` ?
A) npx is a command-line tool that lets you run Node.js packages without installing them globally. It temporarily downloads 
and executes the specified package, which is useful for running tools like parcel or create-react-app on the fly. 
This avoids cluttering your system with global installations and ensures you're using the latest version. 
It's especially helpful for one-time commands or quick project setups.

Q) What is difference between `dependencies` vs `devDependencies`
A) In a package.json file, dependencies are the packages required for your application to run in production, 
such as React or Axios. On the other hand, devDependencies are tools needed only during development, 
like testing frameworks, linters, or bundlers (e.g., Jest, ESLint, Parcel). This distinction helps keep your 
production build lightweight by installing only what's necessary to run the app.

Q) What is Tree Shaking?
A) Tree shaking is a process used in modern JavaScript bundlers (like Webpack or Parcel) to remove unused code 
from your final bundle. It analyzes your imports and eliminates functions, variables, or modules that are never used, 
reducing the overall file size. This helps make your app faster and more efficient by shipping only the code that's 
actually needed.

Q) What is Hot Module Replacement?
A) Hot Module Replacement (HMR) is a feature in modern development tools like Webpack and Parcel that allows you to update 
parts of your application in real-time without reloading the entire page. When you make changes to your code (like editing a 
component or CSS), HMR updates only the affected modules in the browser. This makes development faster and smoother by preserving 
the app's state and avoiding full reloads.

Q)  List down your favourite 5 superpowers of Parcel and describe any 3 of them in your own words.
A) 1) HOT module replacement 2) Caching 3) Bundling 4) Tree Shaking 5) Compressing  
    1) Caching: Parcel uses caching to speed up builds by storing the results of previously processed files in a hidden folder 
    called .parcel-cache. When you run a build or dev server again, Parcel checks if a file has changed—if not, it reuses the 
    cached version instead of reprocessing it.
    2) Bundling: Bundling in Parcel refers to the process of combining all your project's files (JavaScript, CSS, HTML, 
    images, etc.) into a few optimized output files. Parcel automatically analyzes dependencies between modules and bundles 
    them together efficiently. This reduces the number of files the browser needs to load, improving performance and making 
    deployment easier. The result is a compact, production-ready version of your app.
    3) Tree shaking: Tree shaking in Parcel is an automatic optimization that removes unused code (dead code) from your 
    JavaScript during the bundling process

Q) What is `.gitignore`? What should we add and not add into it?
A) .gitignore is a file that tells Git which files or folders to ignore and not track in version control. 
You should add temporary files like node_modules/, .env, and build or cache folders, but not core source code or 
essential config files.

Q) What is the difference between `package.json` and `package-lock.json`
A) ChatGPT said:
package.json : lists the project's dependencies, scripts, and metadata, acting as the main config file for your Node.js project.
package-lock.json : locks the exact versions of all installed packages (including nested ones) to ensure consistent installs 
                    across all environments.

Q) Why should I not modify `package-lock.json`?
A) You should not manually modify package-lock.json because it's automatically generated by npm to lock exact dependency versions, 
ensuring consistency across all environments. Editing it by hand can break the dependency tree, cause version mismatches, or 
lead to hard-to-debug install issues. Always let npm update it during installs or updates.

Q) What is `node_modules` ? Is it a good idea to push that on git?
A) node_modules is a directory where npm installs all the dependencies listed in your package.json file, along with their nested 
dependencies. It can become very large and is not meant to be pushed to Git. Pushing node_modules clutters the repository, 
slows down cloning, and can introduce platform-specific issues. Instead, it's best practice to include node_modules/ in your
.gitignore file and rely on npm install to recreate it when needed.

Q) What is the `dist` folder?
A) The dist (short for "distribution") folder contains the final, production-ready version of your application. 
Tools like Parcel or Webpack generate this folder by bundling, minifying, and optimizing your source code. It includes 
all the files (HTML, CSS, JS, images, etc.) that are ready to be deployed to a server or hosting platform.

Q) What is `browserlists`
A) browserslist is a configuration that tells tools like Autoprefixer, Babel, and Parcel which browsers your project 
should support. Based on this, these tools automatically adjust your code